find_package(absl CONFIG REQUIRED)
find_package(benchmark CONFIG REQUIRED)
find_package(Bitsery CONFIG REQUIRED)
# find_package(Boost REQUIRED [COMPONENTS <libs>...])
find_package(Catch2 CONFIG REQUIRED)
find_package(cityhash CONFIG REQUIRED)
find_package(cJSON CONFIG REQUIRED)
find_package(cppfs CONFIG REQUIRED)
find_package(cppitertools CONFIG REQUIRED)
find_package(cpr CONFIG REQUIRED)
find_package(Crc32c CONFIG REQUIRED)
find_package(CURL CONFIG REQUIRED)
find_package(Flatbuffers CONFIG REQUIRED)
find_package(folly CONFIG REQUIRED)
find_package(gflags CONFIG REQUIRED)
find_package(GTest CONFIG REQUIRED)
find_package(Immer CONFIG REQUIRED)
find_package(jsoncpp CONFIG REQUIRED)
find_package(libuv CONFIG REQUIRED)
find_package(msgpack CONFIG REQUIRED)
find_package(murmurhash CONFIG REQUIRED)
find_package(nameof CONFIG REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)
find_package(protobuf CONFIG REQUIRED)
find_package(RapidJSON CONFIG REQUIRED)
find_package(restclient-cpp CONFIG REQUIRED)
find_package(Snappy CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)
find_package(Taskflow CONFIG REQUIRED)
find_package(TBB CONFIG REQUIRED)
find_package(Thrift CONFIG REQUIRED)
find_package(unofficial-concurrentqueue CONFIG REQUIRED)
find_package(wangle REQUIRED)
find_package(zstd CONFIG REQUIRED)
find_path(CPP_HTTPLIB_INCLUDE_DIRS "httplib.h")
find_path(CPP_PEGLIB_INCLUDE_DIRS "peglib.h")
find_path(PARALLEL_HASHMAP_INCLUDE_DIRS "parallel_hashmap/btree.h")
find_path(REFL_CPP_INCLUDE_DIRS "refl.hpp")
set(nlohmann-json_IMPLICIT_CONVERSIONS OFF)
# target_include_directories(main PRIVATE ${CPP_HTTPLIB_INCLUDE_DIRS})
# target_include_directories(main PRIVATE ${CPP_PEGLIB_INCLUDE_DIRS})
# target_include_directories(main PRIVATE ${PARALLEL_HASHMAP_INCLUDE_DIRS})
# target_include_directories(main PRIVATE ${REFL_CPP_INCLUDE_DIRS})
# target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:uv_a>,uv_a,uv>)
# target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:zstd::libzstd_shared>,zstd::libzstd_shared,zstd::libzstd_static>)
# target_link_libraries(main PRIVATE absl::any absl::base absl::bits absl::city)
# target_link_libraries(main PRIVATE benchmark::benchmark benchmark::benchmark_main)
# target_link_libraries(main PRIVATE Bitsery::bitsery)
# target_link_libraries(main PRIVATE Boost::boost Boost::<lib1> Boost::<lib2> ...)
# target_link_libraries(main PRIVATE Catch2::Catch2 Catch2::Catch2WithMain)
# target_link_libraries(main PRIVATE cityhash)
# target_link_libraries(main PRIVATE cjson)
# target_link_libraries(main PRIVATE cppfs::cppfs)
# target_link_libraries(main PRIVATE cppitertools::cppitertools)
# target_link_libraries(main PRIVATE cpr::cpr)
# target_link_libraries(main PRIVATE Crc32c::crc32c)
# target_link_libraries(main PRIVATE CURL::libcurl)
# target_link_libraries(main PRIVATE flatbuffers::flatbuffers)
# target_link_libraries(main PRIVATE Folly::folly Folly::folly_deps Folly::follybenchmark Folly::folly_test_util)
# target_link_libraries(main PRIVATE gflags::gflags)
# target_link_libraries(main PRIVATE GTest::gmock GTest::gtest GTest::gmock_main GTest::gtest_main)
# target_link_libraries(main PRIVATE immer)
# target_link_libraries(main PRIVATE jsoncpp_object jsoncpp_static JsonCpp::JsonCpp)
# target_link_libraries(main PRIVATE msgpackc msgpackc-cxx)
# target_link_libraries(main PRIVATE murmurhash::murmurhash)
# target_link_libraries(main PRIVATE nameof::nameof)
# target_link_libraries(main PRIVATE nlohmann_json::nlohmann_json)
# target_link_libraries(main PRIVATE protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite)
# target_link_libraries(main PRIVATE rapidjson)
# target_link_libraries(main PRIVATE restclient-cpp)
# target_link_libraries(main PRIVATE Snappy::snappy)
# target_link_libraries(main PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
# target_link_libraries(main PRIVATE Taskflow::Taskflow)
# target_link_libraries(main PRIVATE TBB::tbb TBB::tbbmalloc)
# target_link_libraries(main PRIVATE thrift::thrift thriftz::thriftz thriftnb::thriftnb)
# target_link_libraries(main PRIVATE unofficial::concurrentqueue::concurrentqueue)
# target_link_libraries(main PRIVATE wangle::wangle)
